Tenemos dos casos:
1) No se salva nadie
2) Se salva al menos una ciudad

1) NO SE SALVA NADIE

No se salva nadie <-> Mi algoritmo dice que no se salva nadie

-> Supongamos que no se salva nadie, eso quiere decir que no existe ninguna ciudad tal que si yo gasto todo mi presupuesto en enviarle soldados a ella, esta obtenga 1 soldado por cada 10 zombies como mínimo

Entonces supongo P un presupuesto tal que no llegue a cumplir los costos de envío de soldados mínimo para salvar ninguna ciudad.
Particularmente, si p no alcanza para salvar a ninguna ciudad, no alcanza para salvar a la ciudad que menos presupuesto necesita para ser salvada(si hay más de una cuyo costo es el mínimo, en particular no se puede salvar ninguna de ellas)(A)

Por lo tanto, cuando mi algoritmo ordene las ciudades por costo de salvación, que es justamente el costo que tiene conseguir la mínima cantidad de soldados necesarios para salvar esa ciudad, y tome la primer ciudad, que es la que menos presupuesto necesita para ser salvada(o por lo menos una de ellas), por lo dicho en (A), mi algoritmo no tomará esta ciudad puesto que el presupuesto no alcanza, y devolverá que se pueden salvar 0 ciudades, y no enviará tropas, pues el país está perdido, fracasamos, NO SE SALVA NADIE.

<- Supongamos que mi algoritmo dice que no se salva nadie.

Entonces, eso significa que por lo explicado anteriormente, el presupuesto es menor a la ciudad que menos costo requiere por ser salvada(si hay varios mínimos, esto no molesta ya que justamente tienen el mismo costo por salvación)

Pero si el presupuesto es menor al costo de salvar a la ciudad (o ciudades) que menos costo requiere por salvarse, entonces el presupuesto es menor al costo de salvar cualquier ciudad.

Si el presupuesto no alcanza para salvar ninguna ciudad, entonces nuevamente, NO SE SALVA NADIE.

2)Se salva al menos una ciudad:

Hay solución no vacía <=> Mi algoritmo devuelve solución óptima

Sea N nuestra solución óptima, la solución armada con el goloso, y O la solución óptima que más se parece a N. Asumimos N no óptima y ordeno O por el costo de salvación, de menor a mayor.
Sea Nk el primer elemento en el que difieren O y N osea para todo i<k Ni=Oi
Dado que Nk fue obtenido usando el algoritmo goloso sabemos que C(Nk) >= C(N(k-1)) y que paratodo j>k C(Nk)<=C(Nj)
En otras palabras, de los Nk tiene el menor de los costos mayores que N(k-1). Por lo tanto C(Nk)<=C(Ok), luego puedo reemplazar Ok por Nk y obtengo una solución óptima que se parece mas que la O original a N. ABSURDO puesto que partimos de que O es la solución óptima que más se parece a N.
Este absurdo viene de suponer que N no es óptima.


