v v v(1)	e e e(2)	a a a(3)
v p v		a p a		a p a
v v v		a a a		e e e

Supongamos que yo tengo un ejemplo como el de (1), donde v es un casillero vacío y p un caballo inicial. Veamos que tanto (2) como (3) son soluciones(e significa caballo extra colocado y a casilla amenazada sin un caballo colocado). Esto significa que en principio, puede haber multiples soluciones óptimas. Más aún, observemos que si el tablero fuera de 2 x 2, la unica manera de obtener un tablero completo (o sea un tablero tal que todas sus casillas o tienen un caballo o estan amenazadas por uno) es que haya un caballo en cada casilla, o sea que puedo tener soluciones optimas como en 3 x 3 o puedo necesitar completar el tablero con caballos como en 2 x 2. Y si fuera de 4 x 4?

a a a p(4)	a p a a(5)	a p e a(6)	a a p a(7)	a a a a(8)
a a e p		a p a a		a p e a		a a p a		e e e e
a a e p		a e a a		a a a a		a a p a		a a a a
a a a p		a e a a		a a a a		a a p a		a a a a

Veamos que (4) es un ejemplo donde pude insertar 2 caballos, (5) y (6) son un tablero de 4 x 4 pero ambos son solucion de un mismo tablero inicial, y (7) no necesita poner ningún caballo extra. Esto significa que hay casos muy variados y muy amplios, lo cual vuelve difícil construir un algorítmo que me resuelva el problema. Ante esto, como somos malos perdedores, decidimos que vamos a sacrificar tiempo, pero vamos a encontrar una solución óptima.Podemos afrontar este problema con un backtracking de fuerza bruta, planteando un algoritmo que chequee todas las posibles formas de insertar caballos en un determinado tablero (desde rellenar un tablero con caballos hasta no poner ninguno) y se quede con una solución tal que el tablero esté completo (o sea que todas sus casillas o tienen un caballo o estan amenazadas por uno), y la cantidad de caballos insertados sea menor o igual al de todo el resto de las soluciones. Una idea más ordenada de este algoritmo de backtracking es la siguiente(suponiendo que el tablero de entrada no está completo, puesto que sino se devolverá este mismo tablero):
- Recorriendo el tablero: empezaremos por el casillero de la primera fila y primera columna, iremos avanzando por los distintos casilleros de esa fila, en orden, y cuando se llegue al final de una fila, continuaremos por el primer casillero de la fila siguiente. Así hasta recorrer el tablero completo.Esto me asegura que paso por todas las casillas (A)
- Insertando caballos: para cada casillero, si este tiene un caballo p colocado, se verá el siguiente casillero, y de no existir, la solución dada hasta el momento se tomará como la óptima. Sino, abordaremos dos posibilidades. Primero veremos el caso en el que se coloca un caballo en ese casillero, y después veremos el caso en el que no se agrega dicho caballo (ver 9). En cada caso, se verá si el tablero queda o no completo, y si queda completo, se lo comparará con el resto de las soluciones completas, para ver si la cantidad de caballos agregados es menor o igual a todas o no. De ser menor o igual a todas, se la considerará la solución hasta que se encuentre una solución mejor. De no encontrarse una solución mejor en los siguientes casos que se observen, sera considerada mi solución óptima. Junto con (A), esto significa que se ven todas las posibles ramas de decisión (como muestra 9), y por cada decisión se pregunta si es una solución, y si lo es, si es mejor que las anteriores, lo que quiere decir que pregunta por todas las soluciones y se queda con la mejor efectivamente.


				--------1-------- (los numeros representan casillero numero tal visto)
			pongo c	|		|no pongo c
				|		|
		----------------2		2----------------
	pongo c	|		|no pongo c	|pongo c	|no pongo c
		|		|		|		|
		3		3		3		3
										(9)
				    ETCETERA

Por estos razonamientos, se que la idea de mi algoritmo es correcto, en el sentido que hace lo que necesito si lo hago bien.
Sin embargo, ver todos los casos es algo muy tedioso y si bien tenemos tiempo para perder, los docentes de algo 3 se molestarían si perdemos demasiado, lo cual motiva a pensar:
- Cotas estratégicas: Si se está viendo un caso que supera esa cota, se desechará, puesto que ese camino seguro no llega a una solución óptima, y si se encuentra una solución que mejora esa cota, entonces empezar a considerar esa nueva cota a partir de ese momento.
Entonces analicemos qué cotas tomar.  No puedo pararme a pensar un caso por cada tamaño de tablero, puesto que no terminaría nunca, así que pensemos en algunos casos particulares y luego trataremos de generalizar:
- como dijimos antes a un tablero de 2 x 2 hay que llenarlo de caballos, o sea, necesita 4 caballos para completarse.
- si consideramos un tablero de 3x3, la solución (2) es óptima(cambiando su p por una e) lo cual significa que independientemente de los caballos p, con a lo sumo 4 e se debe completar.
- si vemos el tablero (8), vemos que a un tablero de 4 x 4 vacío, con 4 caballos le basta para completarse, lo cual significa que sucede algo similar a con el tablero de 3 x 3.
Por esto diremos que si nuestro tablero es menor o igual a 4 x 4, no debo ver aquellos casos que pongan más de 4 caballos, puesto que de seguro, eso no es una solución óptima. Pero que sucede con el resto de los casos? Observemos lo siguiente. Sea un tablero de n x m (no apto para este juego, pero si para lo que se quiere mostrar) con n = 5 y m >=5. Tomemos por ejemplo un tablero de 5 x 5 vacío, pero con una fila de caballos en el centro(llamados c).

v v v v v(10)	v v v v v v(11)
v v v v v	v v v v v v
c c c c c	c c c c c v
v v v v v	v v v v v v
v v v v v	v v v v v v

Observemos que en (10) todas las casillas estan amenazadas u ocupadas y sería un tablero completo.Es más, si sacaramos un solo caballo, el tablero dejaría de ser completo.Esto si bien no tiene por que ser una solución óptima, es cuanto menos una solución que no usa una cantidad abusiva de caballos. Ahora que sucedería si extendieramos una columna más, como en (11)? observemos que todas las casillas estarían ocupadas menos la de la fila del medio a la derecha (digamos, casillero 3,6). O sea que si la fila estuviera completa, sería un tablero completo.. observar que si vuelvo a extender una columna sucede lo mismo. Volviendo otra vez a tableros válidos (de nxn), la idea recien mencionada nos hace pensar que independientemente del tamaño del tablero, con una linea de caballos cada 5 filas, debería bastar para completarlo, y ver más caballos que eso, sería un esfuerzo innecesario. Notar que para un tablero de nxn con n no multiplo de 5, basta agregar 1 fila de caballos cada 5 filas, y una más entre las filas que quedan libres (si una fila céntrica completa 5 filas, en particular completa 4,3,2 y 1). 
Entonces, por todo lo dicho anteriormente, dado un tablero de n x n con n < 5, tomo como cota 4 caballos extras, y si n>=5 tomo como cota n* redondeado_hacia_arriba(1/5 * n) que es lo que significa meter una fila de caballos por cada 5 filas (más una fila extra en caso de n no múltiplo de 5).
Sin embargo, agregar estas cotas, ¿puede producir que obtenga un resultado no óptimo? La pregunta casi que se contesta sola, pues las cotas justamente se basan en que conozco una solución segura que no se si es óptima, pero se que usa una determinada cantidad de caballos, y una solución que use más caballos que esta, seguro no es óptima.
