Se llevarán acabo distintos experimentos para mostrar de manera empírica ciertos aspectos de nuestro algoritmo que hasta ahora en el presente informe, se encuentran de manera teórica. Queremos mostrar que efectivamente nuestro algoritmo tiene una complejidad de nlog(n), y que el foco de ésta se encuentra en el sort, por lo que, no deberìa haber diferencias significativas en tiempo entre un pais que salva todas sus ciudades, y un paìs igual pero con un presupuesto que no permita salvar ninguna.

Graficos y sus explicaciones:

Cada gràfico debe explicar como fue generado, que representa y lo que ocurre en el exactamente, SIN SACAR CONCLUSIONES. Por ejemplo, se puede notar que Roberto tarda menos en cubrir cierta distancia que Pedro, eso se puede decir, pero no se puede decir, Se puede notar que roberto es màs ràpido que pedro.


Graficos que deben aparecer ahora, con sus explicaciones abajo, y con un numero


1) Grafico No se salva nadie.(1)

Explicaciòn del gràfico

Grafico Comparo dividiendo por n(2)

Explicacion del grafico

grafico dividiendo por log n(3)

Explicacion del grafico

grafico dividiendo por n log n(4)

explicacion del grafico

Si bien el grafico 1 pareciera mostrar una recta, lo cual significaría que nuestro algoritmo sería O(n), y crecería linealmente, al observar la figura 3, veo que al dividir por log n queda algo parecido a una recta también, suceso que no debría ocurrir de ser O(n) nuestro algoritmo. Más aún, al ver la figura 3 vemos la curvita inicial propia de la funcion log n, y para despejar cualquier duda, al dividir por nlogn, el grafico 4 nos muestra que nuestra función tiende en tiempo a la constante "insertar constante". Es por eso, que estos gráfico parecerían respaldar la teoría que nuestro algoritmo tiene complejidad n log n

Ahora veamos que tanta incidencia tiene en el tiempo de ejecución, que no se salve ninguna ciudad o que se salven todas.

Grafico no se salva nadie vs se salvan todos.

Explicacion del grafico

EL gráfico pareciera respaldar nuestra teoría, puesto que podemos observar que los tiempos de ejecución son muy similares( al principio casi indistinguibles) con una leve inclinación a que no salvar a ninguna ciudad es más rapido que salvar a todas.

Por todo lo arriba experimentado, pareciera que nuestro material teórico tiene apoyo empírico.



Alta frecuencia %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

En esta secciòn se tratara de contrastar el material teórico brindado anteriormente, con experimentaciòn. Para esto correremos con nuestro programa, un conjunto de casos de text que nos permita verificar de manera empirica que la complejidad de nuestro algoritmo es n log n, y, por otro lado, que cierto tipo de entradas producen un mayor tiempo de ejecución que ciertas otras.

Primero, compararemos lo que anteriormente en el informe hemos llamado frecuencias en cadena, tren y piramide, y sobre la que resulte más costosa en tiempo, haremos nuestro analisis de complejidad.

Gráfico de comparacion de tren, cadena y piramide

Explicacion del gráfico

Podemos notar que claramente las frecuencias en piramide tardan más tiempo en este gráfico, por lo que haremos nuestro analisis empírico de la complejidad sobre este gráfico.

Grafico de una frecuencia (1)

Explicación del gráfico

Gráfico de una frecuencia dividida logn (2)

Explicación del gráfico

Grafico de una frecuencia dividida por n (3)

Explicacion del grafico

Gráfico de una frecuencia dividida nlogn (4)

Explicación del gráfico

Veamos que el grafico 1 parecería tener una pequeña curva, lo cual significaría que nuestro algoritmo sería O(nlogn), al observar la figura 2, veo que al dividir por log n queda algo parecido a una recta también, suceso que apoya la teoría sobre nuestro algoritmo. Más aún, al ver la figura 3 vemos la curvita inicial propia de la funcion log n, y para despejar cualquier duda, al dividir por nlogn, el grafico 4 nos muestra que nuestra función tiende en tiempo a la constante "insertar constante". Es por eso, que estos gráfico parecerían respaldar la teoría que nuestro algoritmo tiene complejidad n log n.

CABALLOS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

En esta sección normalmente trataríamos de analizar empíricamente que la complejidad de nuestro algoritmo es exponencial. Sin embargo, si realmente fuera exponencial, entonces hacer un análisis de complejidad sería muy complicado por un tema de tiempos. Es por esto, que los experimentos realizados, mostrarán como al aumentar el n, los tiempos cambian drásticamente. Por otro lado, veremos como el agregar caballos preubicados disminuyen en gran proporción el tiempo utilizado por nuestro algoritmo, y que ocurre con el caso de un tablero lleno.

Gráfico de vacíos

Explicación del gráfico

Observemos que en este gráfico el crecimiento no es lineal y que n=2 es mas de 1800 veces más rápido que n=5. De hecho, observemos que en el gráfico, el eje de las y está en escala logarítmica, y aún así, si uno los puntos con una linea, da algo mayor que lineal. Esto es un indicio de que nuestro algoritmo es exponencial, lo cual apoya nuestro analisis de complejidad.

Por otro lado, veamos que sucede con tableros llenos:

Gráfico de llenos.

Explicación del gráfico.

Veamos que la diferencia de tiempos es realmente mínima, y el tiempo de ejecución es realmente pequeño, con un pico en 5. Esto probalemente se deba a que, por como está hecho nuestro algoritmo, si el tablero está lleno,nos ahorramos el costo de recorrerlo y nos limitamos a devolver el tablero de entrada, ya que este es solución. Las diferencias de tiempo(sobre todo la vista en n=5), puede explicarse por el costo de copiar el tablero inicial como tablero solución, que es O(n^2).

Ahora, veamos que sucede cuando a un tablero se le van agregando caballos preubicados.

Gráfico 5x5 con insercion random

Explicación del gráfico.

Observamos que hay una abrupta disminución de tiempo por cada caballo agregado. Esto se podría deber, a que cuando hay un caballo preubicado, nuestro algoritmo no debe decidir entre poner un caballo o no ponerlo, y se ahorra toda la rama de decisión de no poner un caballo. Esto último ya fue abordado en el apartado de análisis de complejidad.

En conclusión, si bien no podemos decir que nuestro algoritmo es exponencial de manera empírica, las dificultades generadas por los tiempos de experimentación y los experimentos, apoyan la teoría de que nuestro algoritmo pueda ser del orden exponencial.
