Lo de abajo de la línea punteada es la idea anterior a esta, y honestamente no la leí.  La dejo por si a alguien le despierta algo.

La nueva idea es la siguiente:
Haciendo una especie de backtracking, voy mirando los caminos desde el lugar de salida hasta el lugar de llegada de manera tal de que no se muera ningún soldado.  Puede que encuentre un camino, o puede que no.  La clave para que no se nos vaya al diablo la complejidad es, cuando por un camino llego a un link que no puedo cruzar sin que se mueran soldados, marcarlo de alguna manera para que dentro de mi pseudo backtraking no vuelva a tocar ese link(esta manera puede ser por ejemplo, si uso grafos, trazando un nuevo enlace).  De la misma manera, marcar los caminos que voy haciendo para que los nuevos caminos que vaya tomando no tomen fragmentos de los caminos anteriores.  Esto vale porque si por un camino llegué a un nodo sin sacrificar soldados, si por otro camino llego al mismo nodo como que es lo mismo.  Entonces es ir viendo distintas maneras de avanzar sin que se me muera ningún soldado. La idea sería saber de alguna manera hasta dónde llegué en cada camino, porque si no logré llegar con todos vivos al bunker, empiezo a mirar caminos en los que pueda sacrificar a lo sumo 1 soldado (o sea, que lleguen con 1 menos).  Para eso, me sirve tomar los caminos que ya pude recorrer con todos, y continuarlos hasta donde se pueda asumiendo que se puede morir 1, además de ver nuevos caminos en los que de entrada se muera 1.  Si así no llegué, hago lo mismo pero sacrificando hasta 2 soldados.  Y así sucesivamente hasta llegar, si es que llego. Tener en cuenta que un camino donde estoy considerando que se me murieron n soldados, no puede pisar un camino en donde se murieron menos de n soldados, porque entonces prefiero usar ese otro camino... esta dicho más arriba pero lo reaclaroXD
Al parecer la complejidad se cumple, porque no visito cada nodo más de 8 veces (ver que como mucho un nodo tiene 4 links asociados, y lo peor que me puede pasar es ir y volver por cada uno en el pseudo backtraking) entonces ver todos los caminos me toma 8*m*n que es m*n, y esto lo estaría haciendo a lo sumo s veces así que queda el famoso s*n*m.
Y al parecer esto nos va construyendo algún camino óptimo, así que sería correcto.
Le falta mucha formalidad, pero la idea hasta ahora cierra.
Cualquier cosa avisen.

Lo que le falta a esto es como conseguir el camino original.. para eso, cada vez que avanzo por una calle hacia una esquina, me anoto de que esquina vine... esto causa que cada nodo del grafo sepa de donde vino, y se pueda hacer el camino hacia atras... había que tener mucho cuidado que no se formara un ciclo infinito, como por ejemplo el del dibujo


1 __2 --3   Hago lo que puedo gente.... __ es un camino tomado al igual que !
|   !   !   -- y | son caminos no tomados.. si para llegar hice 1,2,5,8,9,6,5,4,7,10,11,12, ver que 
4 __5 __6   cuando voy retrocediendoy llego al 5, el anterior del 5 es 2 o 6...si yo me voy por el
!   !   !   camino del 6 vuelvo a llegar al 5 y si me voy por el 6... y si lo vuelvo a hacer...
7 --8 __9   cuidado con eso, no me acuerdo si lo habiamos solucionado
!   |   |
10__11__12



--------------------------------------------------------------------------------------------------------------------------------------------------------

si esto funca, gracias facu^^ corrección, una parte no funciona, asi que facu se la come(?)

tomo s como cantidad de soldados, y la ciudad de m x n....

primero, olvidemonos de la optimalidad, y busquemos una manera de encontrar un camino no optimo, pero valido, o sea que deje a mi científico vivo.

Todavía no encuentro como hacer esto, puesto que lo importante es que:

a) este camino se logre en O(m x n)
b) su criterio de comparación sea que quede al menos un soldado vivo

SI LOGRASEMOS ESTO...(y me re pinta que esto se puede hacer si no pido que el camino sea el de menor cantidad de soldados), lo unico que deberíamos hacer luego sería correr el mismo programa, pero exigiendo que queden por lo menos dos soldados vivos.... luego 3... y asi hasta s.... si la i-esima corrida del programa no encuentra solución, entonces el camino que devolveremos como optimo es el    i -1... los casos bordes luego se piensan... pero si pudiesemos hacer esto, obviamente mi algoritmo sería de O(m x n x s)

ATENCIÓN: ver que pedir que queden por lo menos i soldados vivos, NO ES LO MISMO que suponer que empiezo con i soldados... esto se debe a que s soldados pueden hacer más que i soldados.. por ejemplo:
supongamos una ciudad grande que tiene 5 zombies en todas las calles, salvo en las cuatro calles que conectan con el bunker, que tiene 6 zombies... si yo empiezo con 4 soldados muero sin remedio alguno... si yo empiezo con 5 soldados vivo, pero mi solución optima me deja 4 soldados vivos, entonces empezar con 4 soldados vivos no me dijo nada. 
